# @recubed/async

[![Build Status](https://travis-ci.org/rethree/async.svg?branch=master)](https://travis-ci.org/rethree/async)
[![CodeFactor](https://www.codefactor.io/repository/github/rethree/async/badge)](https://www.codefactor.io/repository/github/rethree/async)
[![Coverage Status](https://coveralls.io/repos/github/rethree/async/badge.svg?branch=master)](https://coveralls.io/github/rethree/async?branch=master)
[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-license.org/)
[![dependencies
Status](https://david-dm.org/rethree/async/status.svg)](https://david-dm.org/rethree/async) 
[![devDependencies Status](https://david-dm.org/rethree/async/dev-status.svg)](https://david-dm.org/rethree/async?type=dev)


Minimal set of **functional async primitives**.

Inspired by algebraic data types, functional programming principles and some other `TypeScript` libraries (e.g. `fp-ts`). Interfaces follow purity, laziness, safety and declarativeness as their main design factors.
Mostly here to support my incoming `Redux` REST client but can be of use outside of this ...

The library consists of following primitives:

##### Task: 

```typescript





#### incoming
* Docs
* Free Continuation, trampolined
* Retry
